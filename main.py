from flask import Flask, render_template_string, request, redirect, session
from flask_sqlalchemy import SQLAlchemy
import random
import requests  # –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –í–∏–∫–∏–ø–µ–¥–∏–∏

# --- LLM (DeepInfra) integration ---
import os
import requests as _requests

DEEPINFRA_API_KEY = os.getenv("DEEPINFRA_API_KEY")

def ask_llm(message, system_prompt="–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ-—Ä—É—Å—Å–∫–∏."):
    """Call DeepInfra OpenAI-compatible endpoint if API key is set.
    Returns string answer or None on error / not configured.
    """
    if not DEEPINFRA_API_KEY:
        return None
    try:
        url = "https://api.deepinfra.com/v1/openai/chat/completions"
        headers = {
            "Authorization": f"Bearer {DEEPINFRA_API_KEY}",
            "Content-Type": "application/json",
        }
        payload = {
            "model": "meta-llama/Meta-Llama-3-8B-Instruct",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message},
            ],
            "temperature": 0.3,
        }
        resp = _requests.post(url, headers=headers, json=payload, timeout=60)
        data = resp.json()
        return data.get("choices", [{}])[0].get("message", {}).get("content")
    except Exception as e:
        # Fail soft: don't break the app if LLM call fails
        print("LLM error:", e)
        return None
import re

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3'
app.secret_key = 'secretkey'
db = SQLAlchemy(app)

# --- –ú–æ–¥–µ–ª–∏ ---
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    login = db.Column(db.String(32), unique=True, nullable=False)
    password = db.Column(db.String(32), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)
    tariff = db.Column(db.String(16), default='demo')  # demo, standart, premium

class Support(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    text = db.Column(db.Text, nullable=False)
    answer = db.Column(db.Text)
    is_tariff = db.Column(db.Boolean, default=False)

class Knowledge(db.Model):  # –°–∞–º–æ–æ–±—É—á–∞—é—â–∞—è—Å—è –±–∞–∑–∞ "–≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç"
    id = db.Column(db.Integer, primary_key=True)
    phrase = db.Column(db.String(256), nullable=False, unique=True)
    answer = db.Column(db.Text, nullable=False)

# --- –•–µ–ª–ø–µ—Ä—ã ---
def get_current_user():
    uid = session.get('user_id')
    if uid:
        return User.query.get(uid)
    return None

def init_db():
    with app.app_context():
        db.create_all()
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –Ω–µ—Ç
        if not User.query.filter_by(login="Artem2013").first():
            db.session.add(User(login="Artem2013", password="Art2013Ar", is_admin=True, tariff="premium"))
            db.session.commit()

# --- –°—Ç–∏–ª—å –∏ navbar ---
STYLE = """
<style>
body { min-height:100vh; background:linear-gradient(135deg,#b0e0ff,#e6d8ff,#f7c6f7,#d8f5e7); font-family:'Segoe UI',sans-serif; margin:0;}
.navbar {background:#fff7;box-shadow:0 2px 16px #b0e0ff66;}
.container-main {display:flex;flex-direction:column;align-items:center;justify-content:center;min-height:75vh;}
h1 { font-size:2.7rem;font-weight:700;margin-top:38px;text-align:center;letter-spacing:1px;text-shadow:0 2px 12px #e2e6fa77;}
.sub {font-size:1.18rem;color:#49447a;text-align:center;margin-bottom:28px;}
@media (max-width:800px){h1{font-size:1.7rem}.container-main{padding:14px 2px;}}
.chat-container {background:#fff9;border-radius:16px;box-shadow:0 0 14px #c6c6e044;padding:16px;max-width:420px;width:100%;margin:0 auto;}
.chat-messages {max-height:350px;overflow-y:auto;margin-bottom:10px;}
.chat-bubble {margin:10px 0;padding:12px 16px;border-radius:16px;background:#f0f6ff;font-size:1rem;}
.chat-bubble.user {background:#d8f7e8;text-align:right;}
.chat-bubble.ai {background:#e7e6fd;text-align:left;}
@media (max-width:600px){.chat-container{max-width:97vw;}}
</style>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"/>
"""

def navbar(active="/"):
    user = get_current_user()
    return render_template_string("""
<nav class="navbar navbar-expand-lg mb-3">
  <div class="container">
    <a class="navbar-brand fw-bold" href="/">NeiroGPT</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        <li class="nav-item"><a class="nav-link {% if active=='/' %}active{% endif %}" href="/">–ì–ª–∞–≤–Ω–∞—è</a></li>
        {% if user %}
          <li class="nav-item"><a class="nav-link {% if active=='/chat' %}active{% endif %}" href="/chat">–ß–∞—Ç</a></li>
          <li class="nav-item"><a class="nav-link {% if active=='/profile' %}active{% endif %}" href="/profile">–ü—Ä–æ—Ñ–∏–ª—å</a></li>
          <li class="nav-item"><a class="nav-link {% if active=='/tariffs' %}active{% endif %}" href="/tariffs">–¢–∞—Ä–∏—Ñ—ã</a></li>
          <li class="nav-item"><a class="nav-link {% if active=='/support' %}active{% endif %}" href="/support">–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞</a></li>
          {% if user.is_admin %}
            <li class="nav-item"><a class="nav-link {% if active=='/admin' %}active{% endif %}" href="/admin">–ê–¥–º–∏–Ω–∫–∞</a></li>
          {% endif %}
        {% endif %}
      </ul>
      <div class="d-flex">
        {% if user %}
          <span class="me-2">üë§ {{ user.login }}</span>
          <a class="btn btn-outline-danger btn-sm" href="/logout">–í—ã–π—Ç–∏</a>
        {% else %}
          <a class="btn btn-primary btn-sm me-2" href="/login">–í—Ö–æ–¥</a>
          <a class="btn btn-success btn-sm" href="/register">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a>
        {% endif %}
      </div>
    </div>
  </div>
</nav>
""", user=user, active=active)

# --- –ì–ª–∞–≤–Ω–∞—è
@app.route("/")
def index():
    user = get_current_user()
    return render_template_string("""
    {{style|safe}}
    {{navbar|safe}}
    <div class="container-main">
      <h1>NeiroGPT ‚Äî –±—É–¥—É—â–µ–µ —É–∂–µ –∑–¥–µ—Å—å</h1>
      <div class="sub">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</div>
      {% if not user %}
      <a href="/login" class="btn btn-primary btn-lg">–í–æ–π—Ç–∏ –≤ —á–∞—Ç</a>
      {% else %}
      <a href="/chat" class="btn btn-success btn-lg">–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç</a>
      {% endif %}
    </div>
    """, style=STYLE, navbar=navbar("/"), user=user)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@app.route("/register", methods=["GET", "POST"])
def register():
    if get_current_user(): return redirect("/chat")
    msg = ""
    if request.method == "POST":
        login = request.form["login"]
        password = request.form["password"]
        if User.query.filter_by(login=login).first():
            msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
        else:
            u = User(login=login, password=password, is_admin=False, tariff="demo")
            db.session.add(u)
            db.session.commit()
            session['user_id'] = u.id
            session['chat'] = []
            return redirect("/chat")
    return render_template_string("""
    {{style|safe}}{{navbar|safe}}
    <div class="container d-flex flex-column align-items-center">
      <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
      <form method="post" style="max-width:350px;width:100%;">
        <input class="form-control mb-2" name="login" placeholder="–õ–æ–≥–∏–Ω" required>
        <input class="form-control mb-2" name="password" type="password" placeholder="–ü–∞—Ä–æ–ª—å" required>
        <button class="btn btn-success w-100">–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</button>
      </form>
      {% if msg %}<div class="alert alert-danger mt-2">{{msg}}</div>{% endif %}
    </div>
    """, style=STYLE, navbar=navbar("/register"), msg=msg)

# --- –í—Ö–æ–¥
@app.route("/login", methods=["GET", "POST"])
def login():
    if get_current_user(): return redirect("/chat")
    msg = ""
    if request.method == "POST":
        login = request.form["login"]
        password = request.form["password"]
        u = User.query.filter_by(login=login, password=password).first()
        if u:
            session['user_id'] = u.id
            session['chat'] = []
            return redirect("/chat")
        else:
            msg = "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!"
    return render_template_string("""
    {{style|safe}}{{navbar|safe}}
    <div class="container d-flex flex-column align-items-center">
      <h2>–í—Ö–æ–¥</h2>
      <form method="post" style="max-width:350px;width:100%;">
        <input class="form-control mb-2" name="login" placeholder="–õ–æ–≥–∏–Ω" required>
        <input class="form-control mb-2" name="password" type="password" placeholder="–ü–∞—Ä–æ–ª—å" required>
        <button class="btn btn-primary w-100">–í–æ–π—Ç–∏</button>
      </form>
      {% if msg %}<div class="alert alert-danger mt-2">{{msg}}</div>{% endif %}
    </div>
    """, style=STYLE, navbar=navbar("/login"), msg=msg)

@app.route("/logout")
def logout():
    session.clear()
    return redirect("/")

# --- –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route("/profile")
def profile():
    user = get_current_user()
    if not user:
        return redirect("/login")
    return render_template_string("""
    {{style|safe}}{{navbar|safe}}
    <div class="container mt-4" style="max-width:400px;">
      <h3>–ü—Ä–æ—Ñ–∏–ª—å</h3>
      <b>–õ–æ–≥–∏–Ω:</b> {{user.login}}<br>
      <b>–¢–∞—Ä–∏—Ñ:</b> {{user.tariff}}<br>
      <b>–†–æ–ª—å:</b> {% if user.is_admin %}–ê–¥–º–∏–Ω{% else %}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{% endif %}<br>
    </div>
    """, style=STYLE, navbar=navbar("/profile"), user=user)

# --- –ß–∞—Ç —Å –ò–ò (–æ–±—É—á–µ–Ω–∏–µ)
@app.route("/chat", methods=["GET", "POST"])
def chat():
    user = get_current_user()
    if not user: return redirect("/login")
    if "chat" not in session or not isinstance(session["chat"], list):
        session["chat"] = []
    if request.method == "POST":
        text = request.form["text"].strip()
        if text:
            session["chat"].append({"from": "user", "text": text})
            ai_ans = smart_answer_learn(text)
            session["chat"].append({"from": "ai", "text": ai_ans})
    chat_history = session.get("chat", [])
    return render_template_string("""
    {{style|safe}}{{navbar|safe}}
    <div class="container chat-container mt-4">
      <div class="chat-messages" id="msglist">
        {% for m in chat %}
          <div class="chat-bubble {{m.from}}">{{m.text}}</div>
        {% endfor %}
      </div>
      <form method="post" class="d-flex gap-2" onsubmit="setTimeout(()=>{this.text.value=''},200)">
        <input autofocus autocomplete="off" name="text" class="form-control" placeholder="–í–∞—à –≤–æ–ø—Ä–æ—Å..." required onkeydown="if(event.key==='Enter'&&!event.shiftKey){this.form.submit();return false;}">
        <button class="btn btn-primary">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      </form>
    </div>
    <script>
      setTimeout(()=>{let d=document.getElementById('msglist');d.scrollTop=d.scrollHeight;},100);
    </script>
    """, style=STYLE, navbar=navbar("/chat"), chat=chat_history)

# --- –¢–∞—Ä–∏—Ñ—ã (–æ—Å—Ç–∞–≤–∏–º —Ç–≤–æ–π —à–∞–±–ª–æ–Ω)
@app.route("/tariffs")
def tariffs():
    return render_template_string("""
    {{style|safe}}{{navbar|safe}}
    <div class="container mt-4" style="max-width:740px;">
      <h3>–¢–∞—Ä–∏—Ñ—ã</h3>
      <div class="row row-cols-1 row-cols-md-3 g-3">
        <div class="col">
          <div class="card h-100 border-success">
            <div class="card-header text-success fw-bold">–î–µ–º–æ</div>
            <div class="card-body"><b>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</b><br>–û–±—ã—á–Ω—ã–π —á–∞—Ç.</div>
            <div class="card-footer text-center">–ü–æ–¥–∫–ª—é—á–µ–Ω–æ</div>
          </div>
        </div>
        <div class="col">
          <div class="card h-100 border-info">
            <div class="card-header text-info fw-bold">–°—Ç–∞–Ω–¥–∞—Ä—Ç</div>
            <div class="card-body"><b>199‚ÇΩ/–º–µ—Å</b><br>600 –≤–æ–ø—Ä–æ—Å–æ–≤/–º–µ—Å.<br>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞.</div>
            <div class="card-footer text-center">
              <form method="post" action="/buy">
                <input type="hidden" name="tariff" value="standart">
                <button class="btn btn-outline-info btn-sm mt-2">–ö—É–ø–∏—Ç—å</button>
              </form>
            </div>
          </div>
        </div>
        <div class="col">
          <div class="card h-100 border-warning">
            <div class="card-header text-warning fw-bold">–ü—Ä–µ–º–∏—É–º</div>
            <div class="card-body"><b>399‚ÇΩ/–º–µ—Å</b><br>2000 –≤–æ–ø—Ä–æ—Å–æ–≤/–º–µ—Å.<br>VIP –ø–æ–¥–¥–µ—Ä–∂–∫–∞.</div>
            <div class="card-footer text-center">
              <form method="post" action="/buy">
                <input type="hidden" name="tariff" value="premium">
                <button class="btn btn-outline-warning btn-sm mt-2">–ö—É–ø–∏—Ç—å</button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
    """, style=STYLE, navbar=navbar("/tariffs"))

# --- –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ "–ö—É–ø–∏—Ç—å" —Ç–∞—Ä–∏—Ñ (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è + –∑–∞—è–≤–∫–∞)
@app.route("/buy", methods=["POST"])
def buy():
    user = get_current_user()
    if not user: return redirect("/login")
    tariff = request.form.get("tariff")
    return render_template_string("""
    {{style|safe}}{{navbar|safe}}
    <div class="container mt-4" style="max-width:450px;">
      <h4>–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞: <b>{{tariff.title()}}</b></h4>
      <div class="alert alert-info">
        <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b><br>
        1. –û–ø–ª–∞—Ç–∏—Ç–µ <b>{% if tariff=='standart' %}199‚ÇΩ{% elif tariff=='premium' %}399‚ÇΩ{% endif %}</b> –Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫ –ø–æ –Ω–æ–º–µ—Ä—É: <b>+7 (929) 842-53-70</b> –∏–ª–∏ <b>+8 (929) 842-53-70</b><br>
        2. –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ.<br>
        3. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∏–∂–µ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É).
      </div>
      <form method="post" action="/tariff-request">
        <input type="hidden" name="tariff" value="{{tariff}}">
        <textarea name="msg" class="form-control mb-2" placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏: –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–ø–ª–∞—Ç–∞, –≤–∞—à –ª–æ–≥–∏–Ω, –¥–µ—Ç–∞–ª–∏..." required></textarea>
        <button class="btn btn-success w-100">–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É</button>
      </form>
      <a href="/tariffs" class="btn btn-link mt-2">–ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º</a>
    </div>
    """, style=STYLE, navbar=navbar("/tariffs"), tariff=tariff)

# --- –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ç–∞—Ä–∏—Ñ
@app.route("/tariff-request", methods=["POST"])
def tariff_request():
    user = get_current_user()
    if not user: return redirect("/login")
    text = request.form.get("msg")
    tariff = request.form.get("tariff")
    support = Support(user_id=user.id, text=f"–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ {tariff}: {text}", is_tariff=True)
    db.session.add(support)
    db.session.commit()
    return render_template_string("""
    {{style|safe}}{{navbar|safe}}
    <div class="container mt-4" style="max-width:440px;">
      <div class="alert alert-success">
        –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.
      </div>
      <a href="/tariffs" class="btn btn-primary">–ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º</a>
    </div>
    """, style=STYLE, navbar=navbar("/tariffs"))

# --- –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ (—á–∞—Ç —Å –±–æ—Ç–æ–º + –æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∞–¥–º–∏–Ω–æ–º)
@app.route("/support", methods=["GET", "POST"])
def support():
    user = get_current_user()
    if not user: return redirect("/login")
    chat = session.get("support_chat", [])
    msg = ""
    if request.method == "POST":
        text = request.form["text"]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ "–≤–æ–ø—Ä–æ—Å"
        chat.append({"from": "user", "text": text})
        # –û—Ç–≤–µ—Ç –æ—Ç –ò–ò (–æ–±—É—á–∞–µ—Ç—Å—è —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ –æ–±—ã—á–Ω—ã–π —á–∞—Ç)
        ai_ans = smart_answer_learn(text, context="support")
        chat.append({"from": "ai", "text": ai_ans})
        session["support_chat"] = chat
        msg = "–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—É—á–µ–Ω!"
    return render_template_string("""
    {{style|safe}}{{navbar|safe}}
    <div class="container mt-4" style="max-width:480px;">
      <h3>–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞</h3>
      <div class="chat-messages mb-2" style="height:240px;overflow:auto;background:#fff5;padding:12px;border-radius:12px;">
        {% for m in chat %}
          <div class="chat-bubble {{m.from}}">{{m.text}}</div>
        {% endfor %}
      </div>
      <form method="post">
        <textarea name="text" class="form-control mb-2" placeholder="–í–∞—à –≤–æ–ø—Ä–æ—Å..." required></textarea>
        <button class="btn btn-primary w-100">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      </form>
      <a href="/support-admin" class="btn btn-link mt-2">–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–µ–∞–ª—å–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º</a>
      {% if msg %}<div class="alert alert-success mt-2">{{msg}}</div>{% endif %}
    </div>
    """, style=STYLE, navbar=navbar("/support"), chat=chat, msg=msg)

# --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞: —Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É)
@app.route("/support-admin", methods=["GET", "POST"])
def support_admin():
    user = get_current_user()
    if not user: return redirect("/login")
    msg = ""
    if request.method == "POST":
        text = request.form["text"]
        sup = Support(user_id=user.id, text=text, is_tariff=False)
        db.session.add(sup)
        db.session.commit()
        msg = "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–∞–ª—å–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!"
    return render_template_string("""
    {{style|safe}}{{navbar|safe}}
    <div class="container mt-4" style="max-width:440px;">
      <h4>–°–≤—è–∑—å —Å —Ä–µ–∞–ª—å–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º</h4>
      <form method="post">
        <textarea name="text" class="form-control mb-2" placeholder="–í–∞—à –≤–æ–ø—Ä–æ—Å..." required></textarea>
        <button class="btn btn-warning w-100">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      </form>
      {% if msg %}<div class="alert alert-info mt-2">{{msg}}</div>{% endif %}
      <a href="/support" class="btn btn-link mt-2">–ù–∞–∑–∞–¥</a>
    </div>
    """, style=STYLE, navbar=navbar("/support"), msg=msg)

# --- –ê–¥–º–∏–Ω–∫–∞
@app.route("/admin", methods=["GET", "POST"])
def admin():
    user = get_current_user()
    if not user or not user.is_admin:
        return redirect("/")
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    if request.method == "POST":
        if "support_id" in request.form:
            sup = Support.query.get(int(request.form["support_id"]))
            sup.answer = request.form["answer"]
            db.session.commit()
        elif "user_id" in request.form and "tariff" in request.form:
            u = User.query.get(int(request.form["user_id"]))
            u.tariff = request.form["tariff"]
            db.session.commit()
    users = User.query.all()
    support = Support.query.order_by(Support.id.desc()).all()
    return render_template_string("""
    {{style|safe}}{{navbar|safe}}
    <div class="container mt-4">
      <h3>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h3>
      <h5>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h5>
      <table class="table table-bordered">
        <tr><th>ID</th><th>–õ–æ–≥–∏–Ω</th><th>–¢–∞—Ä–∏—Ñ</th><th>–†–æ–ª—å</th><th>–°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ</th></tr>
        {% for u in users %}
        <tr>
          <td>{{u.id}}</td>
          <td>{{u.login}}</td>
          <td>{{u.tariff}}</td>
          <td>{% if u.is_admin %}–ê–¥–º–∏–Ω{% else %}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{% endif %}</td>
          <td>
            <form method="post" class="d-flex gap-2">
              <input type="hidden" name="user_id" value="{{u.id}}">
              <select name="tariff" class="form-select form-select-sm" style="max-width:120px;">
                <option value="demo" {% if u.tariff=='demo' %}selected{% endif %}>demo</option>
                <option value="standart" {% if u.tariff=='standart' %}selected{% endif %}>standart</option>
                <option value="premium" {% if u.tariff=='premium' %}selected{% endif %}>premium</option>
              </select>
              <button class="btn btn-sm btn-outline-success">OK</button>
            </form>
          </td>
        </tr>
        {% endfor %}
      </table>
      <h5 class="mt-4">–ó–∞—è–≤–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞</h5>
      <table class="table table-sm table-bordered">
        <tr><th>ID</th><th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th><th>–¢–∏–ø</th><th>–°–æ–æ–±—â–µ–Ω–∏–µ</th><th>–û—Ç–≤–µ—Ç</th><th>–î–µ–π—Å—Ç–≤–∏–µ</th></tr>
        {% for s in support %}
        <tr>
          <td>{{s.id}}</td>
          <td>
            {% for u in users %}
              {% if u.id == s.user_id %}
                {{u.login}}
              {% endif %}
            {% endfor %}
          </td>
          <td>{% if s.is_tariff %}<b>–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ</b>{% else %}–í–æ–ø—Ä–æ—Å{% endif %}</td>
          <td>{{s.text}}</td>
          <td>{{s.answer or "-"}}</td>
          <td>
            <form method="post" style="min-width:160px;">
              <input type="hidden" name="support_id" value="{{s.id}}">
              <input type="text" name="answer" placeholder="–û—Ç–≤–µ—Ç..." class="form-control form-control-sm mb-1" value="{{s.answer or ''}}">
              <button class="btn btn-sm btn-primary">–û—Ç–≤–µ—Ç–∏—Ç—å</button>
            </form>
          </td>
        </tr>
        {% endfor %}
      </table>
    </div>
    """, style=STYLE, navbar=navbar("/admin"), users=users, support=support)

# --- –†–µ–∞–ª–∏–∑–∞—Ü–∏—è "—Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è" –∏ –ø–æ–∏—Å–∫–∞
def smart_answer_learn(text, context=None):
    text_l = text.lower()
    # 1. –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (—Ñ—Ä–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    for know in Knowledge.query.all():
        if know.phrase in text_l:
            return know.answer
    # 2. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ SMART_WORDS
    for i, key in enumerate(SMART_WORDS):
        if key in text_l:
            return SMART_ANSWERS[i % len(SMART_ANSWERS)]
    # 3. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏—â–µ–º –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏
    wiki_answer = search_wikipedia(text)
    if wiki_answer:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º "—É–Ω–∏–∫–∞–ª—å–Ω—ã–π" –æ—Ç–≤–µ—Ç (–∑–∞–º–µ–Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–æ–≤)
        uniq = wiki_answer.replace(" ‚Äî ", " —ç—Ç–æ ").replace(" –í–∏–∫–∏–ø–µ–¥–∏—è", " —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –æ–ø—ã—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –±—É–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
        db.session.add(Knowledge(phrase=text_l[:120], answer=uniq[:350]))
        db.session.commit()
        return uniq
    # 4. –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    answer = f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á—É —ç—Ç–æ –≥–ª—É–±–∂–µ –∏ —Å–∫–æ—Ä–æ —Å–º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å."
    db.session.add(Knowledge(phrase=text_l[:120], answer=answer))
    db.session.commit()
    return answer

def search_wikipedia(query):
    """–ò—â–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏ (ru)"""
    try:
        url = f"https://ru.wikipedia.org/api/rest_v1/page/summary/{query.replace(' ','_')}"
        r = requests.get(url, timeout=2)
        if r.status_code == 200 and "extract" in r.json():
            text = r.json()["extract"]
            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–æ —Ç–æ—á–∫–∏)
            s = re.split(r'[.!?]', text)
            if s and len(s[0]) > 12:
                return s[0]
            return text[:180]
    except Exception:
        pass
    
    # 4. –ü–æ–ø—ã—Ç–∫–∞ —Å–ø—Ä–æ—Å–∏—Ç—å —É LLM (DeepInfra), –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–ª—é—á
    llm = ask_llm(text)
    if llm:
        try:
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –æ–ø—ã—Ç
            if not Knowledge.query.filter_by(phrase=text.lower()).first():
                db.session.add(Knowledge(phrase=text.lower(), answer=llm))
                db.session.commit()
        except Exception as _e:
            print("save LLM answer failed:", _e)
        return llm
    return None

# --- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ò–ò
SMART_WORDS = [
    "–ø—Ä–∏–≤–µ—Ç", "–∫–∞–∫ –¥–µ–ª–∞", "–ø–æ–≥–æ–¥–∞", "–Ω–æ–≤–æ—Å—Ç–∏", "–∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞", "–±–∏—Ç–∫–æ–∏–Ω", "–ø—É—Ç–∏–Ω", "—á—Ç–æ —Ç–∞–∫–æ–µ", "–∫—Ç–æ —Ç–∞–∫–æ–π", "–∫–æ–≥–¥–∞",
    "–ø–æ—á–µ–º—É", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–æ—Ç–∫—É–¥–∞", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç", "–∞–Ω–µ–∫–¥–æ—Ç", "—Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É", "–ø–æ—Å–æ–≤–µ—Ç—É–π —Ñ–∏–ª—å–º", "—Ü–∏—Ç–∞—Ç–∞", "–º–æ—Ç–∏–≤–∏—Ä—É–π",
    "—Å–æ–≤–µ—Ç", "—Ä–µ—Ü–µ–ø—Ç", "–∏–≥—Ä–∞", "–ª—é–±–æ–≤—å", "—Ä–∞–±–æ—Ç–∞", "python", "java", "–±–æ—Ç", "–∫–æ—Ç", "–ø–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞", "—É—á—ë–±–∞", "–º–µ–º", "—é–º–æ—Ä",
    "–ø—Ä–∞–≤–¥–∞", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç", "–¥–µ–Ω—å–≥–∏", "—Å—á–∞—Å—Ç—å–µ", "–∑–¥–æ—Ä–æ–≤—å–µ", "—Ä–µ–π—Ç–∏–Ω–≥", "top", "–≥–æ—Ä–æ—Å–∫–æ–ø", "–±—É–¥—É—â–µ–µ", "–¥—Ä—É–∂–±–∞", "—Å—Ç—Ä–∞–Ω–∞",
    "–≤–ª–∞—Å—Ç—å", "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "–Ω–µ–π—Ä–æ—Å–µ—Ç—å", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "sql", "flask", "react", "vue", "—Å–∞–π—Ç"
]
SMART_ANSWERS = [
    "–ü—Ä–∏–≤–µ—Ç! –Ø –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –æ–±—â–∞—Ç—å—Å—è.",
    "–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Ä–∞–±–æ—Ç–∞—é –¥–ª—è –≤–∞—Å 24/7!",
    "–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–∞—è ‚Äî —Å–∞–º–æ–µ –≤—Ä–µ–º—è —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ.",
    "–í–æ—Ç —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏: ...",
    "–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ –±–∞–Ω–∫–∞, –Ω–æ –º–æ–≥—É –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å.",
    "–ë–∏—Ç–∫–æ–∏–Ω —Å–µ–π—á–∞—Å –æ—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–µ–Ω —Å—Ä–µ–¥–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.",
    "–í–ª–∞–¥–∏–º–∏—Ä –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á –ü—É—Ç–∏–Ω ‚Äî –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –†–§.",
    "–≠—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –°–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–æ.",
    "–≠—Ç–æ—Ç —Ç–µ—Ä–º–∏–Ω —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä...",
    "–†–∞—Å—Å–∫–∞–∂—É –∫–æ—Ä–æ—Ç–∫–æ: ...",
    "–í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç: ...",
    "–û–±—ã—á–Ω–æ —Ç–∞–∫ –±—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–º—É —á—Ç–æ ...",
    "–†–µ—Ü–µ–ø—Ç –¥–Ω—è ‚Äî –±–æ—Ä—â –ø–æ-–¥–æ–º–∞—à–Ω–µ–º—É.",
    "–í–∞–º —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º '–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä' ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!",
    "–î–µ—Ä–∂–∏—Ç–µ —Ü–∏—Ç–∞—Ç—É: '–ë—É–¥—É—â–µ–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–º, –∫—Ç–æ –≤–µ—Ä–∏—Ç –≤ –∫—Ä–∞—Å–æ—Ç—É —Å–≤–æ–µ–π –º–µ—á—Ç—ã.'",
    "–®—É—Ç–∫–∞ –¥–Ω—è: –ó–∞—Ö–æ–¥–∏—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≤ –±–∞—Ä, –∞ –±–∞—Ä–º–µ–Ω –µ–π: '–¢–µ–±—è –Ω–µ –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º!'",
    "–ú–æ–π —Å–æ–≤–µ—Ç ‚Äî –Ω–µ –±–æ–π—Ç–µ—Å—å –ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ!",
    "–í –∏–≥—Ä–µ –≤–∞–∂–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ —É–¥–∞—á–∞!",
    "–õ—é–±–æ–≤—å ‚Äî –≤–µ–ª–∏–∫–∞—è —Å–∏–ª–∞, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è –ª—é–¥–µ–π.",
    "–†–∞–±–æ—Ç–∞ ‚Äî —ç—Ç–æ –ø—É—Ç—å –∫ —Ä–æ—Å—Ç—É –∏ —É—Å–ø–µ—Ö—É.",
    "Python ‚Äî –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –ú–æ–≥—É –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ!",
    "Java ‚Äî —Å—Ç—Ä–æ–≥–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —è–∑—ã–∫. –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.",
    "–ë–æ—Ç—ã –¥–µ–ª–∞—é—Ç –∂–∏–∑–Ω—å –ø—Ä–æ—â–µ. –ú–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –∫–∞–∫ –∏—Ö —Å–æ–∑–¥–∞—Ç—å.",
    "–ö–æ—Ç—ã ‚Äî –ª—É—á—à–∏–µ –∞–Ω—Ç–∏–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç—ã!",
    "–ü–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞: –≤–æ–∑–º–æ–∂–Ω–æ, —Å–æ–ª–Ω–µ—á–Ω–æ, –∫–∞–∫ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.",
    "–£—á—ë–±–∞ ‚Äî –∫–ª—é—á –∫ –∑–Ω–∞–Ω–∏—è–º –∏ –±—É–¥—É—â–µ–º—É.",
    "–í–æ—Ç —Å–≤–µ–∂–∏–π –º–µ–º: –∫–æ–≥–¥–∞ —á–∞—Ç-–±–æ—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–≤–æ–∏–º –ª—É—á—à–∏–º –¥—Ä—É–≥–æ–º...",
    "–Æ–º–æ—Ä ‚Äî –æ—Ç–ª–∏—á–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –æ—Ç —Å—Ç—Ä–µ—Å—Å–∞.",
    "–ü—Ä–∞–≤–¥–∞ ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ –¥–æ–≤–µ—Ä–∏—è.",
    "–§–∞–∫—Ç: –º–æ–∑–≥ —á–µ–ª–æ–≤–µ–∫–∞ –≤–µ—Å–∏—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º 1.4 –∫–≥!",
    "–î–µ–Ω—å–≥–∏ ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∞ –Ω–µ —Ü–µ–ª—å.",
    "–°—á–∞—Å—Ç—å–µ –≤ –º–µ–ª–æ—á–∞—Ö. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∫–∞–∂–¥—ã–º –º–æ–º–µ–Ω—Ç–æ–º!",
    "–ó–¥–æ—Ä–æ–≤—å–µ ‚Äî –≥–ª–∞–≤–Ω–æ–µ –±–æ–≥–∞—Ç—Å—Ç–≤–æ.",
    "–í–æ—Ç —Ç–æ–ø-3 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∫–Ω–∏–≥–∏...",
    "–¢–æ–ø —Ñ–∏–ª—å–º–æ–≤ ‚Äî –ø–æ—Å–æ–≤–µ—Ç—É—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ!",
    "–ì–æ—Ä–æ—Å–∫–æ–ø: —É –≤–∞—Å –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!",
    "–ë—É–¥—É—â–µ–µ ‚Äî –∑–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.",
    "–î—Ä—É–∂–±–∞ ‚Äî –æ–ø–æ—Ä–∞ –≤ –∂–∏–∑–Ω–∏.",
    "–ö–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞.",
    "–í–ª–∞—Å—Ç—å ‚Äî –±–æ–ª—å—à–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.",
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è ‚Äî –Ω–∞—É–∫–∞ –æ –¥—É—à–µ.",
    "–ù–µ–π—Ä–æ—Å–µ—Ç—å ‚Äî —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –º–æ–∑–≥–æ–º —á–µ–ª–æ–≤–µ–∫–∞.",
    "–í–æ—Ç –ø—Ä–æ—Å—Ç–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è...",
    "SQL ‚Äî —è–∑—ã–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.",
    "Flask ‚Äî –º–∏–∫—Ä–æ-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –Ω–∞ Python.",
    "React ‚Äî –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞.",
    "Vue ‚Äî –µ—â—ë –æ–¥–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è UI.",
    "–°–∞–π—Ç ‚Äî —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –æ—Ñ–∏—Å :)"
]

if __name__ == "__main__":
    init_db()
    app.run(host="0.0.0.0", port=5000, debug=True)